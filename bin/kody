#!/usr/bin/env ruby
# encoding: utf-8

require 'kody'
require 'thor'

require 'io/console'

#include Thor::Actions

class KodyRunner < Thor

	desc 'c [OPTIONS]', "Creates a new project."
	method_option :project_type, :type => :string, :required => false, :aliases => '-t', :banner => "The type of your project."
	method_option :framework_version, :type => :string, :required => false, :default => "2.4.0", :aliases => '-v', :banner => "The version of framework."
	method_option :project_name, :type => :string, :required => false, :aliases => '-n', :banner => "The name of your project."
	method_option :project_group, :type => :string, :required => false, :aliases => '-g', :banner => "The group name of your project."
	method_option :artifact_id, :type => :string, :required => false, :aliases => '-a'
	def c
		begin

			opt = Hash.new			
			if options[:project_type].nil?
				print "Generating project in Interactive mode.\n"				
				print "\t1: Java (demoiselle-minimal);\n"
				print "\t2: Java (demoiselle-jsf-jpa);\n"
				print "Choose the type of project: "

				begin
					project_type = STDIN.gets.sub("\n","")
					if project_type.empty?
						opt[:project_type] = "demoiselle-jsf-jpa"
					else					
						case project_type
						when "1"
							opt[:project_type] = "demoiselle-minimal"
						when "2"
							opt[:project_type] = "demoiselle-jsf-jpa"						
						else
							print "Invalid option.\n"
							print "Choose a valid type: "
						end					
					end
				end while project_type != "1" &&  project_type != "2"
			else
				opt[:project_type] = options[:project_type]
			end

			if options[:project_name].nil?
				print "Project Name: "
				opt[:project_name] = STDIN.gets.sub("\n","")
			else
				opt[:project_name] = options[:project_name]
			end

			if options[:project_group].nil?
				print "Project Group: "
				opt[:project_group] = STDIN.gets.sub("\n","")
			else
				opt[:project_group] = options[:project_group]				
			end

			if options[:artifact_id].nil?
				print "Artifact Id: "
				opt[:artifact_id] = STDIN.gets.sub("\n","")
			else
				opt[:artifact_id] = options[:artifact_id]				
			end

			opt[:framework_version] = options[:framework_version]

			print "\n"

			@kody = Kody.new
			@kody.create_project(opt)
		rescue Exception => e 
			App.logger.error e.message
			puts e.backtrace.join("\n")
		end		
	end

	desc 'add_module [OPTIONS]', "Add a module in projet."
	method_option :project_type, :type => :string, :required => false, :aliases => '-t', :banner => "The type of your project."
	method_option :framework_version, :type => :string, :required => false, :default => "2.4.0", :aliases => '-v', :banner => "The version of framework."
	method_option :project_group, :type => :string, :required => false, :aliases => '-g', :banner => "The group name of your project."
	method_option :artifact_id, :type => :string, :required => false, :aliases => '-a'	
	def add_module
		begin
			opt = Hash.new
			if options[:project_type].nil?
				print "Generating project in Interactive mode.\n"				
				print "\t1: Java (demoiselle-minimal);\n"
				print "\t2: Java (demoiselle-jsf-jpa);\n"
				print "Choose the type of project: "

				begin
					project_type = STDIN.gets.sub("\n","")
					if project_type.empty?
						opt[:project_type] = "demoiselle-jsf-jpa"
					else					
						case project_type
						when "1"
							opt[:project_type] = "demoiselle-minimal"
						when "2"
							opt[:project_type] = "demoiselle-jsf-jpa"						
						else
							print "Invalid option.\n"
							print "Choose a valid type: "
						end					
					end
				end while project_type != "1" &&  project_type != "2"
			else
				opt[:project_type] = options[:project_type]
			end

			if options[:project_group].nil?
				print "Project Group: "
				opt[:project_group] = STDIN.gets.sub("\n","")
			else
				opt[:project_group] = options[:project_group]				
			end

			if options[:artifact_id].nil?
				print "Artifact Id: "
				opt[:artifact_id] = STDIN.gets.sub("\n","")
			else
				opt[:artifact_id] = options[:artifact_id]				
			end

			opt[:framework_version] = options[:framework_version]

			print "\n"

			@kody = Kody.new
			@kody.add_module(opt)
		rescue Exception => e 
			App.logger.error e.message
			puts e.backtrace.join("\n")
		end				
	end

    desc 'g [MODEL]', "Generates code from the model."
    method_option :model, :type => :array, :required => true, :aliases => '-d', :banner => "Data model."
    method_option :templates, :type => :string, :required => false, :aliases => '-t', :default => "domain business persistence", :banner => "Templates"
    method_option :module, :type => :string, :required => true, :aliases => '-m', :banner => "Module"
    method_option :debug, :type => :boolean, :required => false, :aliases => '-e', :default => false,:banner => "Show error."
    def g
    	begin
			kody = Kody.new(options)
			kody.from_xmi_file(options[:model])
			kody.generate
		rescue Exception => e 
			App.logger.error e.message			
			puts e.backtrace.join("\n") if options[:debug]
		end
	end

	desc 'gt [MODEL]', "Generate code from the model using a specific template."
    method_option :model, :type => :string, :required => true, :aliases => '-m', :banner => "Model path."
    method_option :template, :type => :string, :required => true, :aliases => '-t', :banner => "Template."
    #method_option :engine, :type => :string, :required => true, :aliases => '-e', :banner => "Engine."
    #method_option :classes, :type => :string, :required => true, :aliases => '-cl', :banner => "Classes."
    method_option :output, :type => :string, :required => true, :aliases => '-o', :banner => "Output."
    method_option :debug, :type => :boolean, :required => false, :aliases => '-d', :default => false,:banner => "Debug mode."
    def gt
    	begin
			kody = Kody.new
			kody.generate2(options[:model], options[:template], options[:classes], options[:output])
		rescue Exception => e 
			App.logger.error e.message
			puts e.backtrace.join("\n") if options[:debug]
		end
	end

	desc 'l', "List all types of projects"
	def l
		puts 'demoiselle-minimal'
		puts 'demoiselle-jsf-jpa'
	end

end

KodyRunner.start
